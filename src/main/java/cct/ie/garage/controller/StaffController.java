package cct.ie.garage.controller;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import cct.ie.garage.entities.Staff;
import cct.ie.garage.repositories.StaffRepository;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/garage/staff") // This means URL's start with /demo (after Application path)
@EntityScan("cct.ie.garage.*")
public class StaffController {
	// This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	@Autowired
	private StaffRepository staffRepository;

	@PostMapping(path = "/add") // Map ONLY POST Requests
	public @ResponseBody String addStaff(@RequestBody Staff staff) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Staff n = new Staff(staff.getPpsn(), staff.getName(), staff.getMidName(), staff.getSurname());
		staffRepository.save(n);
		return "Saved";
	}

	@DeleteMapping(path = "/del")
	public @ResponseBody String delete(@RequestBody Staff staff) {
		staffRepository.deleteById(staff.getId());
		return ("Staff has been deleted!!");

	}

	@PutMapping(path = "/update")
	public @ResponseBody String updateStaff(@RequestBody Staff staff) {
		staffRepository.update(staff.getPpsn(), staff.getId());
		return ("Staff has been updated!!");

	}

	@GetMapping(path = "/findById")
	public @ResponseBody Optional<Staff> findById(@RequestBody Staff staff) {

		return staffRepository.findById(staff.getId());

	}

	@GetMapping(path = "/findAll")
	public @ResponseBody Iterable<Staff> findAll() {
		// This returns a JSON or XML with the users
		return staffRepository.findAll();
	}
}